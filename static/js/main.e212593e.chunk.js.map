{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,+BAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,YCFbC,G,MAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLZM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCCG,E,kDAtCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAdxB,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,oBAS/C,WACE,MAA+BC,KAAKN,MAA7Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAiBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAC7CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAElD,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAgBe,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e212593e.chunk.js","sourcesContent":["import React from 'react'\nimport \"./card.styles.css\"\n\nexport const Card = props => (\n    <div className= 'card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2 >{props.monster.name} </h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from \"react\";\nimport { Card } from \"../card/card.component\";\n\nimport \"./card-list.styles.css\";\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster) => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({placeholder,handleChange}) => \n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange\n    }\n  />;\n\n","import \"./App.css\";\nimport React, { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = e => {\n    this.setState({\n      searchField: e.target.value\n    })\n  }\n\n  render() {\n    const {monsters,searchField} = this.state;\n    const filteredMonster= monsters.filter( monster => \n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1>monster lodomox</h1>\n        <SearchBox \n          placeholder='search monster'\n          handleChange = {this.handleChange}\n        />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}